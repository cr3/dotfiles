servers = (
  {
    address = "localhost";
    chatnet = "BitlBee";
    port = "16667";
    autoconnect = "yes";
  },
  {
    address = "irc.freenode.net";
    chatnet = "Freenode";
    port = "6667";
    autoconnect = "yes";
  }
);

chatnets = {
  BitlBee = {
    type = "IRC";
    autosendcmd = "/^msg nickserv identify PASSWORD";
  };
  Freenode = {
    type = "IRC";
    autosendcmd = "/^msg nickserv identify PASSWORD; wait -Freenode 8000";
    max_kicks = "4";
    max_modes = "4";
    max_msgs = "1";
    max_whois = "1";
  };
};

channels = (
  { name = "&bitlbee"; chatnet = "BitlBee"; autojoin = "Yes"; },
  { name = "#haskell"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#pylib"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#python-testing"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "##rust"; chatnet = "Freenode"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
        chanact = { };
        act = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Marc Tardif";
    user_name = "cr3";
    nick = "cr3";
    log_timestamp = "%Y-%m-%d %H:%M:%S ";
    awaylog_file = "~/log/irssi/away.log";
  };
  "perl/core/scripts" = {
    usercount_show_ircops = "no";
    usercount_show_halfops = "no";
    chanact_show_all = "yes";
    chanact_abbreviate_names = "0";
    chanact_chop_status = "yes";
    chanact_separator = " ";
    awl_display_key = "$Q%K %n$H$C$S";
  };
  "fe-text" = { scroll_page_count = "/1"; actlist_sort = "recent"; };
  "fe-common/core" = {
    beep_when_window_active = "no";
    beep_when_away = "no";
    activity_hide_level = "parts joins quits nicks modes";
    autolog_path = "~/log/irssi/$tag-$0-%Y-%m.log";
    autolog = "no";
    use_msgs_window = "yes";
    activity_hide_targets = "";
    beep_msg_level = "HILIGHT";
    bell_beeps = "yes";
    term_charset = "utf-8";
    autocreate_query_level = "DCCMSGS";
  };
  "irc/dcc" = { dcc_download_path = "/tmp"; };
};

hilights = ( { text = "cr3"; color = "%C"; nick = "yes"; word = "yes"; } );
logs = {
  "~/log/irssi/hilight-%Y-%m.log" = {
    auto_open = "yes";
    level = "ALL";
    items = ( { type = "window"; name = "3"; } );
  };
  "~/log/irssi/msgs-%Y-%m.log" = {
    auto_open = "yes";
    level = "ALL";
    items = ( { type = "window"; name = "4"; } );
  };
  "~/log/irssi/BitlBee-&bitlbee-%Y-%m.log" = {
    auto_open = "yes";
    level = "ALL";
    items = ( { type = "target"; name = "&bitlbee"; } );
  };
};
windows = {
  1 = {
    immortal = "yes";
    name = "status";
    level = "CRAP PUBLICS SNOTES CTCPS ACTIONS JOINS PARTS QUITS KICKS MODES TOPICS WALLOPS INVITES NICKS DCC DCCMSGS CLIENTCRAP";
  };
  2 = { 
    name = "notice";
    level = "NOTICES CLIENTNOTICES";
    sticky = "yes";
  };
  3 = { name = "hilight"; sticky = "yes"; };
  4 = { name = "msgs"; level = "MSGS"; };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&bitlbee";
        tag = "BitlBee";
      }
    );
  };
  6 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#pylib";
        tag = "Freenode";
      },
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#python-testing";
        tag = "Freenode";
      }
    );
  };
  7 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#haskell";
        tag = "Freenode";
      }
    );
  };
  8 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "##rust";
        tag = "Freenode";
      }
    );
  };
};

mainwindows = {
  1 = { first_line = "15"; lines = "35"; };
  3 = { first_line = "8"; lines = "7"; };
  2 = { first_line = "1"; lines = "7"; };
};

ignores = ( { level = "JOINS PARTS QUITS NICKS MODES"; } );
